
Перем Замечания;
Перем КоличествоЗамечаний;
Перем КешФайловИсходников;
Перем ВремяТехдолга;

&Деталька(Значение = "bootstrapper.monaco", ЗначениеПоУмолчанию = "Ложь")
Перем ИспользоватьРедакторМонако;

&Желудь
&Характер("Компанейский")
Процедура ПриСозданииОбъекта()
	Замечания = Новый Соответствие();
	КоличествоЗамечаний = 0;
	ВремяТехдолга = 0;
	КешФайловИсходников = Новый Соответствие();
КонецПроцедуры

Функция ПолучитьТекстФайла(ИмяФайла, ФайлСКодом)
	Файл = Новый ТекстовыйДокумент();
	Файл.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	Текст = Файл.ПолучитьТекст();
	Если ФайлСКодом Тогда
		Текст = СтрЗаменить(Текст, "<", "&lt;");
		Текст = СтрЗаменить(Текст, ">", "&gt;");
	КонецЕсли;
	Возврат Текст;
КонецФункции

Функция СериализоватьЗначение(Значение)
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ПолучитьСкриптИнициализацииМонако(ЗамечанияПоФайлам)
	
	СкриптИнициализации = "";
		
	Путь = ОбъединитьПути(СтартовыйСценарий().Каталог, "Классы", "interface");
	Путь = ОбъединитьПути(Путь, "static", "monaco/issues.js");
	Если Новый Файл(Путь).Существует() Тогда
		КодСкрипта = ПолучитьТекстФайла(Путь, Ложь);
		ШаблонСкрипта = "<script>checked_files = %1; %2</script>";
		ЗамечанияJSON = СериализоватьЗначение(ЗамечанияПоФайлам);
		СкриптИнициализации = СтрШаблон(ШаблонСкрипта, ЗамечанияJSON, КодСкрипта);
	КонецЕсли;
		
	Возврат СкриптИнициализации;

КонецФункции

Процедура ДобавитьЗамеченияИзФайла(Путь) Экспорт

	Если НЕ Замечания[Путь] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(Путь);
	ЗамечанияИзФайла = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();

	МассивЗамечаний = РаспарситьЗамечания(ЗамечанияИзФайла);
	Замечания[Путь] = МассивЗамечаний;

КонецПроцедуры

Функция ПолучитьКритичностьЗамечанияДляМонако(Замечание)

	Критичность = "";

	Если Замечание.Критичность = "INFO" Тогда
		Критичность = "info";
	ИначеЕсли Замечание.Критичность = "MAJOR" Тогда
		Критичность = "warning";
	ИначеЕсли Замечание.Критичность = "MINOR" Тогда
		Критичность = "hint";
	Иначе
		Критичность = "error";
	КонецЕсли;

	Возврат Критичность;

КонецФункции

Функция ПолучитьДанныеЗамечанияДляМонако(Замечание, ДатаПроверки)

	Критичность = ПолучитьКритичностьЗамечанияДляМонако(Замечание);
	Адрес = СтрШаблон("https://1c-syntax.github.io/bsl-language-server/diagnostics/%1", Замечание.Правило);
	Ссылка = СтрШаблон("<a href=""%1"" target=""_blank"">%2</a>", Адрес, Замечание.Правило);

	ДанныеЗамечания = Новый Структура();
	ДанныеЗамечания.Вставить("startLineNumber", Замечание.МестаИспользования[0].СтрокаНачало);
	ДанныеЗамечания.Вставить("endLineNumber", Замечание.МестаИспользования[0].СтрокаКонец);
	ДанныеЗамечания.Вставить("severity", Критичность);
	ДанныеЗамечания.Вставить("message", Замечание.Текст);
	ДанныеЗамечания.Вставить("author", Ссылка);
	ДанныеЗамечания.Вставить("date", Строка(ДатаПроверки) + " " + Замечание.Критичность);
	ДанныеЗамечания.Вставить("time", Замечание.ВремяИсправления);

	Возврат ДанныеЗамечания;

КонецФункции

Функция ПолучитьЗамечанияДляМонако(ДатаПроверки)

	ЗамечанияПоФайлам = Новый Массив();
	Файлы = Новый Соответствие();

	Для Каждого КиЗ из Замечания Цикл
		Для Каждого Замечание Из КиЗ.Значение Цикл
			ИмяФайла = Замечание.МестаИспользования[0].Файл;			
			ЗамечанияФайла = Файлы[ИмяФайла];
			Если ЗамечанияФайла = Неопределено Тогда
				ЗамечанияФайла = Новый Структура("name, code, issues, count, time", ИмяФайла, "", Новый Массив, 0, 0);
				ЗамечанияФайла.code = ПолучитьТекстФайла(ИмяФайла, Истина);
				Файлы[ИмяФайла] = ЗамечанияФайла;
				ЗамечанияПоФайлам.Добавить(ЗамечанияФайла);
			КонецЕсли;
			ДанныеЗамечания = ПолучитьДанныеЗамечанияДляМонако(Замечание, ДатаПроверки);
			ЗамечанияФайла.issues.Добавить(ДанныеЗамечания);
			ЗамечанияФайла.count = ЗамечанияФайла.Count + 1;
			ЗамечанияФайла.time = ЗамечанияФайла.Time + Замечание.ВремяИсправления;
		КонецЦикла;
	КонецЦикла;

	СкриптИнициализации = ПолучитьСкриптИнициализацииМонако(ЗамечанияПоФайлам);

	Результат = Новый Структура;
	Результат.Вставить("ЗамечанияПоФайлам", ЗамечанияПоФайлам);
	Результат.Вставить("СкриптИнициализации", СкриптИнициализации);	

	Возврат Результат;

КонецФункции

Функция ПолучитьЗамечанияЛинейно()

	Результат = Новый Массив();

	Для Каждого КиЗ из Замечания Цикл
		Для Каждого Замечание Из КиЗ.Значение Цикл
			Результат.Добавить(Замечание);
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция Получить(ДатаПроверки) Экспорт
	
	Если ИспользоватьРедакторМонако Тогда
		Результат = ПолучитьЗамечанияДляМонако(ДатаПроверки);
	Иначе
		Результат = ПолучитьЗамечанияЛинейно();
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция КоличествоЗамечаний() Экспорт
	Возврат КоличествоЗамечаний;
КонецФункции

Функция ВремяТехдолга() Экспорт
	Возврат ВремяТехдолга;
КонецФункции

Функция РаспарситьЗамечания(ЗамечанияИзФайла)
	МассивЗамечаний = Новый Массив();

	Для Каждого Замечание Из ЗамечанияИзФайла.issues Цикл
		НовоеЗамечание = СтруктураЗамечания();
		НовоеЗамечание.Правило = Замечание.ruleId;
		НовоеЗамечание.Критичность = Замечание.severity;
		НовоеЗамечание.Тип = Замечание.type;
		НовоеЗамечание.Текст = Замечание.primaryLocation.message;
		НовоеЗамечание.ВремяИсправления = Замечание.effortMinutes;

		НовоеЗамечание.МестаИспользования.Добавить(РаспарситьМестоИспользования(Замечание.primaryLocation));
		КоличествоЗамечаний = КоличествоЗамечаний + 1;
		ВремяТехдолга = ВремяТехдолга + Замечание.effortMinutes;

		Для Каждого МестоИспользования Из Замечание.secondaryLocations Цикл
			НовоеМестоИспользования = РаспарситьМестоИспользования(МестоИспользования);
			НовоеЗамечание.МестаИспользования.Добавить(НовоеМестоИспользования);
			КоличествоЗамечаний = КоличествоЗамечаний + 1;
		КонецЦикла;

		НовоеЗамечание.МестаИспользования = Новый ФиксированныйМассив(НовоеЗамечание.МестаИспользования);

		НовоеЗамечание = Новый ФиксированнаяСтруктура(НовоеЗамечание);

		МассивЗамечаний.Добавить(НовоеЗамечание);

	КонецЦикла;


	Возврат МассивЗамечаний;
КонецФункции

Функция РаспарситьМестоИспользования(МестоИспользованияИзФайла)
	НовоеМестоИспользования = СтруктураМестаИспользования();
	НовоеМестоИспользования.СтрокаНачало = МестоИспользованияИзФайла.textRange.startLine;
	НовоеМестоИспользования.СтрокаКонец = МестоИспользованияИзФайла.textRange.endLine;
	НовоеМестоИспользования.КолонкаНачало = МестоИспользованияИзФайла.textRange.startColumn;
	НовоеМестоИспользования.КолонкаКонец = МестоИспользованияИзФайла.textRange.endColumn;
	НовоеМестоИспользования.Файл = МестоИспользованияИзФайла.filePath;
	НовоеМестоИспользования.Код = ПолучитьСодержаниеФайла(НовоеМестоИспользования.Файл, 
														НовоеМестоИспользования.СтрокаНачало,
														НовоеМестоИспользования.СтрокаКонец);
	Возврат Новый ФиксированнаяСтруктура(НовоеМестоИспользования);
КонецФункции

Функция ПолучитьСодержаниеФайла(ПутьКФайлу, СтрокаНачало, СтрокаКонец)

	Содержание = КешФайловИсходников[ПутьКФайлу];

	Если Содержание = Неопределено Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8,,, Ложь);
		Текст = ЧтениеТекста.Прочитать();
		Содержание = СтрРазделить(Текст, Символы.ПС);
		КешФайловИсходников[ПутьКФайлу] = Содержание;
	КонецЕсли;

	Результат = Новый Массив();

	Для Счетчик = СтрокаНачало - 1 По СтрокаКонец - 1 Цикл
		Результат.Добавить(Содержание[Счетчик]);
	КонецЦикла;

	Возврат СтрСоединить(Результат, Символы.ПС);

КонецФункции

Функция СтруктураЗамечания()
	Возврат Новый Структура("МестаИспользования, Правило, Критичность, Тип, Текст, ВремяИсправления", Новый Массив);
КонецФункции

Функция СтруктураМестаИспользования()
	Возврат Новый Структура("СтрокаНачало, СтрокаКонец, КолонкаНачало, КолонкаКонец, Код, Файл");
КонецФункции