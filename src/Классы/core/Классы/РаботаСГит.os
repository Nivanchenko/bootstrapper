&Пластилин
Перем НастройкиПроекта;

&Пластилин
Перем УведомленияПользователям;

&Пластилин
Перем ЖурналСобытий;

Перем КаталогКонфигурации;
Перем ХешПоследнегоКоммита;

&Желудь
Процедура ПриСозданииОбъекта()
	КаталогКонфигурации = "";
	ХешПоследнегоКоммита = "";
КонецПроцедуры

#Область Служебные

Функция ПолучитьТекстФайла(ИмяФайла)
	Файл = Новый ТекстовыйДокумент();
	Файл.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	Текст = Файл.ПолучитьТекст();
	Текст = СтрЗаменить(Текст, "<", "&lt;");
	Текст = СтрЗаменить(Текст, ">", "&gt;");
	Возврат Текст;
КонецФункции

Процедура ВывестиОшибкуВыполнения(ТекстОшибки, Отказ = Ложь)
	
	ЖурналСобытий.Ошибка(ТекстОшибки);
	УведомленияПользователям.СобытиеЛога(ТекстОшибки);
	Отказ = Истина;

КонецПроцедуры

Функция ОбъединитьМассивы(Массив1, Знач Массив2)

	Для Каждого Значение Из Массив1 Цикл
		Массив2.Добавить(Значение);
	КонецЦикла;

	Возврат Массив2;

КонецФункции

#КонецОбласти

#Область СлужебныеГит

Функция ВыполнитьКомандуГит(КомандаГит)

	Команда = Новый Команда;
	Команда.УстановитьРабочийКаталог(НастройкиПроекта.КаталогРепозитория());
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	Команда.УстановитьКоманду("git");
	Команда.ДобавитьПараметр(КомандаГит);

	Попытка
		КодВозврата = Команда.Исполнить();
		ВыводКоманды = Команда.ПолучитьВывод();
	Исключение
		КодВозврата = 1;
		ВыводКоманды = ОписаниеОшибки();
	КонецПопытки;

	Результат = Новый Структура();
	Результат.Вставить("КодВозврата", КодВозврата);
	Результат.Вставить("ВыводКоманды", ВыводКоманды);

	Возврат Результат;

КонецФункции

Функция ОбрабатыватьФайл(ИмяФайла)

	Расширение = Прав(НРег(ИмяФайла), 3);

	ДопустимыеРасширения = Новый Соответствие();
	ДопустимыеРасширения.Вставить("xml", Истина);
	ДопустимыеРасширения.Вставить("bsl", Истина);

	Возврат ДопустимыеРасширения[Расширение] <> Неопределено;

КонецФункции

Функция ВозможнаОшибкаВКодировке(Файл)
	
	Возврат 0 < СтрНайти(Файл, "\");
	
КонецФункции

Функция ПолучитьПоследнийКоммит()

	ПоследнийКоммит = "";
	Результат = ВыполнитьКомандуГит("log -1 --no-decorate");

	Если Результат.КодВозврата <> 0 Тогда
		ТекстОшибки = "Не удалось получить последний коммит репозитория: %1";
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ВыводКоманды);
		ВывестиОшибкуВыполнения(ТекстОшибки);
	Иначе
		ПоследнийКоммит = СтрПолучитьСтроку(Результат.ВыводКоманды, 1);
		ПоследнийКоммит = СокрЛП(СтрЗаменить(ПоследнийКоммит, "commit", ""));
	КонецЕсли;

	Возврат ПоследнийКоммит;

КонецФункции

Функция ОпределитьКаталогКонфигурации()
	
	КаталогКонфигурации = "";
	КомандаПоиска = "findstr";
	
	Если НастройкиПроекта.ЭтоLinux() Тогда
		КомандаПоиска = "grep";
	КонецЕсли;
	
	Команда = СтрШаблон("ls-tree -r %1 --name-only | %2 Configuration.xml", ХешПоследнегоКоммита, КомандаПоиска);
	Результат = ВыполнитьКомандуГит(Команда);
	
	Если Результат.КодВозврата = 0 И ЗначениеЗаполнено(Результат.ВыводКоманды) Тогда
		ЧастиПути = СтрРазделить(Результат.ВыводКоманды, "/");
		ЧастиПути.Удалить(ЧастиПути.Количество() - 1);
		КаталогКонфигурации = СтрСоединить(ЧастиПути, "/") + "/";
	Иначе
		ТекстОшибки = "Не удалось определить каталог конфигурации в репозитории: %1";
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ВыводКоманды);
		ВывестиОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
	Возврат КаталогКонфигурации;
	
КонецФункции

Функция ПолучитьСписокИзВыводаКомандыГит(ВыводКоманды)

	СписокВывода = Новый Массив();

	Для НомерСтроки = 1 По СтрЧислоСтрок(ВыводКоманды) Цикл
		Значение = СокрЛП(СтрПолучитьСтроку(ВыводКоманды, НомерСтроки));
		Если ЗначениеЗаполнено(Значение) Тогда
			СписокВывода.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокВывода;

КонецФункции

Функция ПолучитьПоследнийЗафиксированныйТекстФайла(ИмяФайла)

	ТекстФайла = "";
	Результат = ВыполнитьКомандуГит(СтрШаблон("show %1:%2", ХешПоследнегоКоммита, ИмяФайла));

	Если Результат.КодВозврата = 0 Тогда
		ТекстФайла = Результат.ВыводКоманды;
	Иначе
		ТекстОшибки = "Не удалось определить текст файла '%1' на точку '%2': %3";
		ТекстОшибки = СтрШаблон(ТекстОшибки, ИмяФайла, ХешПоследнегоКоммита, Результат.ВыводКоманды);
		ВывестиОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;

	Возврат ТекстФайла;

КонецФункции

Функция ПолучитьСписокФайловИзВыводаКомандыГит(ВыводКоманды, ЭтоНовыеФайлы)

	СписокФайлов = Новый Массив();
	СписокВывода = ПолучитьСписокИзВыводаКомандыГит(ВыводКоманды);
	КаталогРепозитория = НастройкиПроекта.КаталогРепозитория();
	ХешПоследнегоКоммита = ПолучитьПоследнийКоммит();
	КаталогКонфигурации = ОпределитьКаталогКонфигурации();
	ОшибкаВКодировке = Ложь;

	Для Каждого ИмяФайла Из СписокВывода Цикл
		Если Не ОбрабатыватьФайл(ИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		ОшибкаВКодировке = Макс(ОшибкаВКодировке, ВозможнаОшибкаВКодировке(ИмяФайла));
		Попытка
			Путь = ОбъединитьПути(КаталогРепозитория, ИмяФайла);
			ТекстФайла = ПолучитьТекстФайла(Путь);
		Исключение
			Если Не ОшибкаВКодировке Тогда
				ВывестиОшибкуВыполнения(ОписаниеОшибки());
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		ИмяОтносительноКонфигурации = ИмяФайла;
		Если СтрНачинаетсяС(ИмяОтносительноКонфигурации, КаталогКонфигурации) Тогда
			ИмяОтносительноКонфигурации = Сред(ИмяОтносительноКонфигурации, СтрДлина(КаталогКонфигурации));
		КонецЕсли;
		ПоследнийТекстФайла = "";
		Если Не ЭтоНовыеФайлы Тогда
			ПоследнийТекстФайла = ПолучитьПоследнийЗафиксированныйТекстФайла(ИмяФайла);
		КонецЕсли;
		Файл = Новый Структура();
		Файл.Вставить("file_name", ИмяФайла);
		Файл.Вставить("file_path", Путь);
		Файл.Вставить("is_new", ЗначениеЗаполнено(ПоследнийТекстФайла));
		Файл.Вставить("text_before", ТекстФайла);
		Файл.Вставить("text_after", ПоследнийТекстФайла);
		Файл.Вставить("relative_path", ИмяОтносительноКонфигурации);
		СписокФайлов.Добавить(Файл);
	КонецЦикла;

	Если ОшибкаВКодировке Тогда
		ТекстОшибки = "Возможно, вывод git имеет некорректный формат и в каталоге репозитория следует выполнить команду
		|""git config core.quotePath false""";
		ВывестиОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;

	Возврат СписокФайлов;

КонецФункции

Функция ПолучитьСписокВетокИзВыводаКомандыГит(ВыводКоманды)

	СписокВеток = Новый СписокЗначений();

	Для НомерСтроки = 1 По СтрЧислоСтрок(ВыводКоманды) Цикл
		ТекущаяВетка = Ложь;
		ИмяВетки = СокрЛ(СтрПолучитьСтроку(ВыводКоманды, НомерСтроки));
		Если СтрНачинаетсяС(ИмяВетки, "*") Тогда
			ТекущаяВетка = Истина;
			ИмяВетки = Сред(ИмяВетки, 3);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяВетки) Тогда
			СписокВеток.Добавить(ИмяВетки, , ТекущаяВетка);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокВеток;

КонецФункции

Функция ПолучитьВыводИзмененныхИНовыхФайлов()

	Отказ = Ложь;
	Результат = Неопределено;

	РезультатИзмененные = ВыполнитьКомандуГит("diff --name-only");
	РезультатНовые = ВыполнитьКомандуГит("ls-files --others --exclude-standard");
	
	Если РезультатИзмененные.КодВозврата <> 0 Тогда
		ТекстОшибки = "Не удалось получить список измененных файлов репозитория: %1";
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатИзмененные.ВыводКоманды);
		ВывестиОшибкуВыполнения(ТекстОшибки, Отказ);
	КонецЕсли;

	Если РезультатНовые.КодВозврата <> 0 Тогда
		ТекстОшибки = "Не удалось получить список новых файлов репозитория: %1";
		ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатИзмененные.ВыводКоманды);
		ВывестиОшибкуВыполнения(ТекстОшибки, Отказ);
	КонецЕсли;

	Если Не Отказ Тогда
		Результат = Новый Структура();
		Результат.Вставить("ИзмененныеФайлы", РезультатИзмененные.ВыводКоманды);
		Результат.Вставить("НовыеФайлы", РезультатНовые.ВыводКоманды);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьКоличествоОбрабатываемыхФайлов(СписокФайлов)

	КоличествоФайлов = 0;

	Для Каждого ИмяФайла Из СписокФайлов Цикл
		Если ОбрабатыватьФайл(ИмяФайла) Тогда
			КоличествоФайлов = КоличествоФайлов + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат КоличествоФайлов;

КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПолучитьСписокИзмененныхФайлов() Экспорт
	
	СписокФайлов = Новый Массив();
	Результат = ПолучитьВыводИзмененныхИНовыхФайлов();

	Если Результат <> Неопределено Тогда
		ИзмененныеФайлы = ПолучитьСписокФайловИзВыводаКомандыГит(Результат.ИзмененныеФайлы, Ложь);
		НовыеФайлы = ПолучитьСписокФайловИзВыводаКомандыГит(Результат.НовыеФайлы, Истина);
		СписокФайлов = ОбъединитьМассивы(ИзмененныеФайлы, НовыеФайлы);
	КонецЕсли;

	Возврат СписокФайлов;	

КонецФункции

Функция ПолучитьКоличествоИзменений() Экспорт

	КоличествоИзменений = 0;
	Результат = ПолучитьВыводИзмененныхИНовыхФайлов();

	Если Результат <> Неопределено Тогда
		ИзмененныеФайлы = ПолучитьСписокИзВыводаКомандыГит(Результат.ИзмененныеФайлы);
		НовыеФайлы = ПолучитьСписокИзВыводаКомандыГит(Результат.НовыеФайлы);
		КоличествоИзменений = ПолучитьКоличествоОбрабатываемыхФайлов(ИзмененныеФайлы);
		КоличествоИзменений = КоличествоИзменений + ПолучитьКоличествоОбрабатываемыхФайлов(НовыеФайлы);
	КонецЕсли;

	Возврат КоличествоИзменений;

КонецФункции

Функция ПолучитьСписокВеток() Экспорт

	СписокВеток = Новый СписокЗначений();
	Результат = ВыполнитьКомандуГит("branch --list");
	
	Если 0 < Результат.КодВозврата Тогда
		ТекстОшибки = "Не удалось получить список веток репозитория: %1";
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ВыводКоманды);
		ВывестиОшибкуВыполнения(ТекстОшибки);
	Иначе
		СписокВеток = ПолучитьСписокВетокИзВыводаКомандыГит(Результат.ВыводКоманды);
	КонецЕсли;

	Возврат СписокВеток;

КонецФункции

Функция ПолучитьТекущуюВетку() Экспорт

	ТекущаяВетка = Неопределено;
	СписокВеток = ПолучитьСписокВеток();
	
	Индекс = 0;
	Пока Индекс < СписокВеток.Количество() И ТекущаяВетка = Неопределено Цикл
		Если СписокВеток[Индекс].Пометка Тогда
			ТекущаяВетка = СписокВеток[Индекс].Значение;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;

	Возврат ТекущаяВетка;

КонецФункции

#КонецОбласти