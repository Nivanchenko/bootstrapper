#Использовать fs

#Область Переменные

Перем ФайлПроекта;
Перем Настройки;
Перем ЭтоLinux;

&Деталька(Значение = "bootstrapper.monaco", ЗначениеПоУмолчанию = "Ложь")
Перем ИспользоватьРедакторМонако;

#КонецОбласти

#Область Конструктор

&Желудь
Процедура ПриСозданииОбъекта()
	ФайлПроекта = ".project.json";
	Настройки = Новый Соответствие();
	Прочитать();
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ЭтоLinux = (0 < Найти(Строка(СистемнаяИнформация.ТипПлатформы), "Linux"));
КонецПроцедуры

Процедура Прочитать() Экспорт
	Если ФС.ФайлСуществует(ФайлПроекта) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(ФайлПроекта);
		Настройки = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция КаталогКонфигурации() Экспорт

	Возврат ПолучитьЗначение("КаталогКонфигурации");
	
КонецФункции

Процедура УстановитьКаталогКонфигурации(КаталогКонфигурации) Экспорт

	УстановитьЗначение("КаталогКонфигурации", КаталогКонфигурации);

КонецПроцедуры

Функция КаталогСборки() Экспорт

	Возврат ПолучитьЗначение("КаталогСборки");
	
КонецФункции

Функция КаталогРепозитория() Экспорт

	Возврат ПолучитьЗначение("КаталогРепозитория");
	
КонецФункции

Процедура УстановитьКаталогСборки(КаталогСборки) Экспорт

	УстановитьЗначение("КаталогСборки", КаталогСборки);

КонецПроцедуры

Функция КаталогОтчетыИОбаботки() Экспорт

	Возврат ПолучитьЗначение("КаталогОтчетыИОбаботки");
	
КонецФункции

Процедура УстановитьКаталогОтчетыИОбаботки(КаталогОтчетыИОбаботки) Экспорт

	УстановитьЗначение("КаталогОтчетыИОбаботки", КаталогОтчетыИОбаботки);

КонецПроцедуры

Функция КаталогТестовАДД() Экспорт

	Возврат ПолучитьЗначение("ТестовАДД");
	
КонецФункции

Процедура УстановитьКаталогТестовАДД(ТестовАДД) Экспорт

	УстановитьЗначение("ТестовАДД", ТестовАДД);

КонецПроцедуры

Функция КаталогРасширенияПоИмени(ИмяРасширения) Экспорт
	МассивРасширений = Расширения();

	Для Каждого Расширение Из МассивРасширений Цикл
		Если Расширение["Имя"] = ИмяРасширения 
			 И НЕ ПустаяСтрока(Расширение["Каталог"]) Тогда
			Возврат Расширение["Каталог"];
		КонецЕсли;
	КонецЦикла;

	Возврат "";
КонецФункции

Функция Расширения() Экспорт

	Расширения = МассивРасширений();

	Если Расширения = Неопределено Тогда
		Возврат Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(Расширения);
	
КонецФункции

Процедура ДобавитьРасширение(ИмяРасширения, КаталогРасширения) Экспорт

	МассивРасширений = МассивРасширений();

	Если МассивРасширений = Неопределено Тогда
		МассивРасширений = Новый Массив();
		УстановитьЗначение("Расширения", МассивРасширений);
	КонецЕсли;

	Соответствие = Новый Соответствие();
	Соответствие.Вставить("Имя", ИмяРасширения);
	Соответствие.Вставить("Каталог", КаталогРасширения);

	МассивРасширений.Добавить(Соответствие);
	
	Записать();

КонецПроцедуры

Функция ИспользоватьРедакторМонако() Экспорт
	Возврат ИспользоватьРедакторМонако;
КонецФункции

Функция ЭтоLinux() Экспорт
	Возврат ЭтоLinux;
КонецФункции

#КонецОбласти

#Область Служебные

Функция МассивРасширений()
	Возврат ПолучитьЗначение("Расширения");
КонецФункции

Процедура УстановитьЗначение(Ключ, Значение)
	Настройки[Ключ] = Значение;
	Записать();
КонецПроцедуры

Функция ПолучитьЗначение(Ключ) Экспорт
	Возврат Настройки[Ключ];
КонецФункции

Процедура Записать()
	// ЗаписьJSON = Новый ЗаписьJSON()
	// ЗаписьJSON.ОткрытьФайл(ФайлПроекта);
	// ЗаписатьJSON(ЗаписьJSON, Настройки);
	// ЗаписьJSON.Закрыть();
КонецПроцедуры

#КонецОбласти